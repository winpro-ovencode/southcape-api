@page "/inplaceeditor-features"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.InPlaceEditor
<h2>In-place Editor</h2>
<br/>
<div id = "ControlRegion">
<div class="row">
    <div class="col-lg-6 control-section inplace-control-section default_layout">
        <div class="control_wrapper">
            <table>
                <tr>
                    <td>
                        <label class="control-label" style="text-align: left;font-size: 14px;font-weight: 400" >
                            TextBox
                        </label>
                    </td>
                    <td>
                        <SfInPlaceEditor Mode="@Mode" EditableOn="@EditableOn"  Type="InputType.Text" ShowButtons="@ShowButtons" Disabled="@Disabled" Value="@TextValue" SubmitOnEnter="@Submit" Model="@TextModel">
                        </SfInPlaceEditor>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label" style="text-align: left;font-size: 14px;font-weight: 400" >
                            NumericTextBox
                        </label>
                    </td>
                    <td>
                        <SfInPlaceEditor Mode="@Mode" EditableOn="@EditableOn" SubmitOnEnter="@Submit" Type="InputType.Numeric" ShowButtons="@ShowButtons" Disabled="@Disabled" Value="@NumericValue" Model="@NumericModel">
                        </SfInPlaceEditor>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label" style="text-align: left;font-size: 14px;font-weight: 400" >
                            MaskedTextBox
                        </label>
                    </td>
                    <td>
                        <SfInPlaceEditor Mode="@Mode" EditableOn="@EditableOn" Type="InputType.Mask" SubmitOnEnter="@Submit" ShowButtons="@ShowButtons" Disabled="@Disabled" Value="@MaskValue" Model="@MaskedModel">
                        </SfInPlaceEditor>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
		<tr><td><div class="property">Properties</div></td></tr>
            <tr>
                <td>
                    <div style="text-align: left;font-size: 14px;font-weight: 400" > Mode</div>
                </td>
                <td>
                    <div>
                        <SfDropDownList Width="90%" TValue="string" TItem="InplaceModes" DataSource="@ModeData" @bind-Value="@DropMode">
                            <DropDownListEvents TValue="string" ValueChange="ChangeEditMode" TItem="InplaceModes"></DropDownListEvents>
							<DropDownListFieldSettings Text="text" Value="value"></DropDownListFieldSettings> 
                        </SfDropDownList>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div style="text-align: left;font-size: 14px;font-weight: 400" >Editable On</div>
                </td>
                <td>
                    <div>
                        <SfDropDownList Width="90%" TValue="string" TItem="InplaceEditableModes" DataSource="@EditableData" @bind-Value="@DropEdit">
                            <DropDownListEvents TValue="string" ValueChange="ChangeEditableOn" TItem="InplaceEditableModes"></DropDownListEvents>
							<DropDownListFieldSettings Text="text" Value="value"></DropDownListFieldSettings> 
                        </SfDropDownList>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div style="text-align: left;font-size: 14px;font-weight: 400" >Show Buttons</div>
                </td>
                <td>
                    <div>
                        <SfCheckBox Checked="@ShowButtons" LabelPosition="LabelPosition.Before" ValueChange="@OnChange" TChecked="bool"></SfCheckBox>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div style="text-align: left;font-size: 14px;font-weight: 400" >Disable</div>
                </td>
                <td>
                    <div>
                        <SfCheckBox LabelPosition="LabelPosition.Before" ValueChange="@OnChangeEnable" TChecked="bool"></SfCheckBox>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div style="text-align: left;font-size: 14px;font-weight: 400" >Submit On Enter</div>
                </td>
                <td>
                    <div>
                        <SfCheckBox LabelPosition="LabelPosition.Before" ValueChange="@OnChangeSubmit" TChecked="bool"></SfCheckBox>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</div>
</div>
<br/>
<div>
  <h3>Selected Features:</h3>
    <ul class="ulstyle">
      <li class="list"> In-place Editor Samples - Overview</li>
      <li class="list"> Theme - Fabric</li>
    </ul>
</div>
<br/>
<style>
	.property {
        padding-left: 10px;
        padding-bottom: 20px;
        font-weight: 600;
        font-size: 15px;
    }
    .inplace-control-section.default_layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,
    .e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide {
        display: block;
        visibility: hidden;
    }
    .inplace-control-section.default_layout .e-inplaceeditor .e-editable-component .e-clear-icon-hide,
    .e-inplaceeditor-tip .e-editable-component .e-input-group .e-clear-icon.e-clear-icon-hide {
        display: block;
        visibility: hidden;
    }
    /* custom code start */
    .inplace-control-section.default_layout .control_wrapper {
        width: 100%;
        max-width: 400px;
        margin: auto;
    }
        .inplace-control-section.default_layout .control_wrapper table td {
            width: 200px;
            height: 100px;
        }
        /* custom code end */
        .inplace-control-section.default_layout .control_wrapper .control-center {
            text-align: center;
        }
        .inplace-control-section.default_layout .control_wrapper table td .control-label {
            margin-bottom: 0px;
        }
    .inplace-control-section.default_layout .e-inplaceeditor {
        height: auto;
    }
    .property-section table td {
        width: 50%;
    }
    .property-section table div {
        padding-left: 10px;
        padding-top: 10px;
    }
    @@media (max-width: 1200px) {
        .inplace-control-section.default_layout {
            width: 100%;
        }
    }
    @@media (max-width: 768px) {
        .inplace-control-section .control_wrapper table tr td:nth-child(1) {
            width: 130px;
        }
        .inplace-control-section .control_wrapper table tr td:nth-child(2) {
            width: 200px;
        }
    }
    #property {
        margin-top : 23px;
    }
    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }
    .list {
    float: left;
    line-height: 20px;
    margin: 10px;
    min-width: 330px;
    }
</style>
@code {
    private RenderMode Mode = RenderMode.Inline;
    private EditableType EditableOn = EditableType.Click;
    private bool Disabled { get; set; } = false;
    private bool Submit { get; set; } = true;
    private bool ShowButtons { get; set; } = true;
    private string TextValue = "Andrew";
    private string MaskValue = "012-345-6789";
    private string NumericValue = "$100.00";
    public string DropMode { get; set; } = "Inline";
    public string DropEdit { get; set; } = "Click";
    public class InplaceModes
    {
        public string value { get; set; }
        public string text { get; set; }
    }
    List<InplaceModes> ModeData = new List<InplaceModes>()
{
        new InplaceModes(){ value= "Inline", text= "Inline" },
        new InplaceModes(){ value= "Popup", text= "Popup" }
    };
    public class InplaceEditableModes
    {
        public string value { get; set; }
        public string text { get; set; }
    }
    List<InplaceEditableModes> EditableData = new List<InplaceEditableModes>()
{
        new InplaceEditableModes(){ value= "Click", text= "Click" },
        new InplaceEditableModes(){ value= "Double Click", text= "Double Click" },
        new InplaceEditableModes(){ value= "Edit Icon Click", text= "Edit Icon Click" }
    };
    private object TextModel = new
    {
        placeholder = "Enter employee name"
    };
    private object NumericModel = new
    {
        placeholder = "Currency format",
        value = 100,
        format = "c2"
    };
    private object MaskedModel = new
    {
        mask = "000-000-0000"
    };
    private void ChangeEditMode(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string,InplaceModes> args)
    {
        this.Mode = (args.Value.ToString() == "Popup" ? RenderMode.Popup : RenderMode.Inline);
        this.StateHasChanged();
    }
    private void ChangeEditableOn(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string,InplaceEditableModes> args)
    {
        if (args.Value.ToString() == "Click")
        {
            this.EditableOn = EditableType.Click;
        }
        else if (args.Value.ToString() == "Double Click")
        {
            this.EditableOn = EditableType.DblClick;
        }
        else
        {
            this.EditableOn = EditableType.EditIconClick;
        }
        this.StateHasChanged();
    }
    private void OnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> arg)
    {
        this.ShowButtons = arg.Checked;
        this.StateHasChanged();
    }
    private void OnChangeEnable(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.Disabled = args.Checked;
        this.StateHasChanged();
    }
     private void OnChangeSubmit(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.Submit = args.Checked;
        this.StateHasChanged();
    }
}
